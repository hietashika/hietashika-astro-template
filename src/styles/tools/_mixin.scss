@use "sass:map";
@use "sass:string";

// スペーシングシステム
@mixin space-variables {
  // 非常に小さいスペース
  &:global([gap="-3"]) { --space: var(--space-2xs); } // 4px
  &:global([gap="-2"]) { --space: var(--space-xs); } // 8px
  &:global([gap="-1"]) { --space: var(--space-s); } // 12px
  
  // 基本的なスペース
  &:global([gap="0"]) { --space: 0; } // スペースなし
  &:global([gap="1"]) { --space: var(--space-m); } // 16px - 基準サイズ
  &:global([gap="2"]) { --space: var(--space-l); } // 24px
  &:global([gap="3"]) { --space: var(--space-xl); } // 32px
  
  // 大きいスペース
  &:global([gap="4"]) { --space: var(--space-2xl); } // 48px
  &:global([gap="5"]) { --space: var(--space-3xl); } // 64px
  &:global([gap="6"]) { --space: var(--space-4xl); } // 96px
  &:global([gap="7"]) { --space: var(--space-5xl); } // 128px
  
  // 非常に大きいスペース
  &:global([gap="8"]) { --space: var(--space-6xl); } // 192px
  &:global([gap="9"]) { --space: var(--space-7xl); } // 256px
  &:global([gap="10"]) { --space: var(--space-8xl); } // 384px
}

// 親子関係のスタイルルール（入れ子のコンポーネント用）
@mixin nested-space-variables {
  // 非常に小さいスペース
  :global(.stack[gap="-3"] > .stack) { margin-block-start: var(--space-2xs) !important; } // 4px
  :global(.stack[gap="-2"] > .stack) { margin-block-start: var(--space-s) !important; } // 8px
  :global(.stack[gap="-1"] > .stack) { margin-block-start: var(--space-m) !important; } // 12px
  
  // 基本的なスペース
  :global(.stack[gap="0"] > .stack) { margin-block-start: 0 !important; } // スペースなし
  :global(.stack[gap="1"] > .stack) { margin-block-start: var(--space-m) !important; } // 16px - 基準サイズ
  :global(.stack[gap="2"] > .stack) { margin-block-start: var(--space-l) !important; } // 24px
  :global(.stack[gap="3"] > .stack) { margin-block-start: var(--space-xl) !important; } // 32px
  
  // 大きいスペース
  :global(.stack[gap="4"] > .stack) { margin-block-start: var(--space-2xl) !important; } // 48px
  :global(.stack[gap="5"] > .stack) { margin-block-start: var(--space-3xl) !important; } // 64px
  :global(.stack[gap="6"] > .stack) { margin-block-start: var(--space-4xl) !important; } // 96px
  :global(.stack[gap="7"] > .stack) { margin-block-start: var(--space-5xl) !important; } // 128px
  
  // 非常に大きいスペース
  :global(.stack[gap="8"] > .stack) { margin-block-start: var(--space-6xl) !important; } // 192px
  :global(.stack[gap="9"] > .stack) { margin-block-start: var(--space-7xl) !important; } // 256px
  :global(.stack[gap="10"] > .stack) { margin-block-start: var(--space-8xl) !important; } // 384px
}

// コンポーネントのスペーシング制御用ミックスイン
// $property: 制御するCSSプロパティ名（例：--center-padding, --stack-gap）
// $prefix: クラスのプレフィックス（例：padding, gap）
// $selector: 追加のセレクタ（デフォルトは空）
@mixin spacing-classes($property, $prefix, $selector: '') {
  $selector-text: if($selector != '', '#{$selector}', '');
  
  // 非常に小さいスペース
  &.#{$prefix}--neg3#{$selector-text} { #{$property}: var(--space-2xs); } // 4px
  &.#{$prefix}--neg2#{$selector-text} { #{$property}: var(--space-xs); } // 8px
  &.#{$prefix}--neg1#{$selector-text} { #{$property}: var(--space-s); } // 12px
  
  // 基本的なスペース
  &.#{$prefix}--0#{$selector-text} { #{$property}: 0; } // スペースなし
  &.#{$prefix}--1#{$selector-text} { #{$property}: var(--space-m); } // 16px - 基準サイズ
  &.#{$prefix}--2#{$selector-text} { #{$property}: var(--space-l); } // 24px
  &.#{$prefix}--3#{$selector-text} { #{$property}: var(--space-xl); } // 32px
  
  // 大きいスペース
  &.#{$prefix}--4#{$selector-text} { #{$property}: var(--space-2xl); } // 48px
  &.#{$prefix}--5#{$selector-text} { #{$property}: var(--space-3xl); } // 64px
  &.#{$prefix}--6#{$selector-text} { #{$property}: var(--space-4xl); } // 96px
  &.#{$prefix}--7#{$selector-text} { #{$property}: var(--space-5xl); } // 128px
  
  // 非常に大きいスペース
  &.#{$prefix}--8#{$selector-text} { #{$property}: var(--space-6xl); } // 192px
  &.#{$prefix}--9#{$selector-text} { #{$property}: var(--space-7xl); } // 256px
  &.#{$prefix}--10#{$selector-text} { #{$property}: var(--space-8xl); } // 384px
}

// 方向付きのスペーシング制御用ミックスイン（ショートハンド対応）
// $base-property: 基本となるCSSプロパティ名（例：--box-padding, --box-margin）
// $prefix: クラスのプレフィックス（例：padding, margin）
@mixin directional-spacing-classes($base-property, $prefix) {
  // 基本的なスペーシングクラス（全方向共通）
  @include spacing-classes($base-property, $prefix);
  
  // 方向別のスペーシングクラス
  // 上下左右の方向ごとに個別のプロパティを提供
  
  // 上方向
  @include spacing-classes("#{$base-property}-top", "#{$prefix}Top");
  
  // 右方向
  @include spacing-classes("#{$base-property}-right", "#{$prefix}Right");
  
  // 下方向
  @include spacing-classes("#{$base-property}-bottom", "#{$prefix}Bottom");
  
  // 左方向
  @include spacing-classes("#{$base-property}-left", "#{$prefix}Left");
  
  // ブロック方向（上下）
  @include spacing-classes("#{$base-property}-block", "#{$prefix}Block");
  
  // インライン方向（左右）
  @include spacing-classes("#{$base-property}-inline", "#{$prefix}Inline");
}

// 二次元ギャップ処理用ミックスイン
// コンポーネントがrow-gapとcolumn-gapの両方を持つ場合に使用
// $base-property: ベースとなるCSSプロパティ（例：--cluster-gap）
// $row-property: 行間のCSS変数（例：--cluster-row-gap）
// $column-property: 列間のCSS変数（例：--cluster-column-gap）
@mixin two-dimensional-gap($base-property, $row-property, $column-property) {
  // 単一のギャップ値用
  @include spacing-classes($base-property, "gap");
  
  // 二次元ギャップ値用
  @include spacing-classes($row-property, "rowgap");
  @include spacing-classes($column-property, "columngap");
  
  // row-gapが指定されている場合
  &.rowgap--0,
  &.rowgap--1,
  &.rowgap--2,
  &.rowgap--3,
  &.rowgap--4,
  &.rowgap--5,
  &.rowgap--6,
  &.rowgap--7,
  &.rowgap--8,
  &.rowgap--9,
  &.rowgap--10,
  &.rowgap--neg1,
  &.rowgap--neg2,
  &.rowgap--neg3 {
    row-gap: var(#{$row-property});
  }

  // column-gapが指定されている場合
  &.columngap--0,
  &.columngap--1,
  &.columngap--2,
  &.columngap--3,
  &.columngap--4,
  &.columngap--5,
  &.columngap--6,
  &.columngap--7,
  &.columngap--8,
  &.columngap--9,
  &.columngap--10,
  &.columngap--neg1,
  &.columngap--neg2,
  &.columngap--neg3 {
    column-gap: var(#{$column-property});
  }
  
  // 両方のギャップが指定されている場合、個別のプロパティを使用し通常のgapは無効化
  &.gap--0,
  &.gap--1,
  &.gap--2,
  &.gap--3,
  &.gap--4,
  &.gap--5,
  &.gap--6,
  &.gap--7,
  &.gap--8,
  &.gap--9,
  &.gap--10,
  &.gap--neg1,
  &.gap--neg2,
  &.gap--neg3 {
    gap: var(#{$base-property});
  }
  
  // row-gapとcolumn-gapが両方設定されている場合、gapプロパティを使わない
  // （個別に設定された値を優先する）
  @at-root {
    %has-dimensional-gap {
      @for $i from -3 through 10 {
        $suffix: if($i < 0, 'neg#{abs($i)}', '#{$i}');

        @if $i != -3 and $i != -2 and $i != -1 and $i != 5 and $i != 7 and $i != 9 {
          &.rowgap--#{$suffix},
          &.columngap--#{$suffix} {
            @content;
          }
        }
      }
    }
    
    #{&}.gap--0,
    #{&}.gap--1,
    #{&}.gap--2,
    #{&}.gap--3,
    #{&}.gap--4,
    #{&}.gap--5,
    #{&}.gap--6,
    #{&}.gap--7,
    #{&}.gap--8,
    #{&}.gap--9,
    #{&}.gap--10,
    #{&}.gap--neg1,
    #{&}.gap--neg2,
    #{&}.gap--neg3 {
      @extend %has-dimensional-gap;

      gap: initial;
    }
  }
}

/**
 * レイアウトエレメントの基本スタイルを生成するミックスイン
 * 各コンポーネントの共通処理を統一的に適用
 *
 * @param {string} $name - コンポーネント名（例：box, stack, cluster）
 */
@mixin element-base($name) {
  .#{$name} {
    // 共通のベーススタイル
    
    // スペーシングとギャップの共通変数
    --#{$name}-gap: var(--space-m);
    
    // 子クラス固有のスタイルはこの後に記述
    @content;
  }
}

/**
 * レスポンシブフォントサイズのclamp制御を行うミックスイン
 * 最小値、最大値、そして中間値の計算式を設定できます
 *
 * @param {string} $min - 最小フォントサイズ（変数または直接値）
 * @param {string} $max - 最大フォントサイズ（変数または直接値）
 * @param {string} $vw-factor - ビューポート幅に対する係数（デフォルト: 1vw）
 */
@mixin responsive-font-size($min, $max, $vw-factor: 1vw) {
  font-size: clamp(#{$min}, calc(#{$min} + #{$vw-factor}), #{$max});
}

/**
 * フォントサイズを設定するミックスイン
 * パラメータが渡された場合はその値を使用し、
 * 渡されない場合はHTML属性を使用してフォントサイズを制御します
 * 各サイズは適切なclamp()を使ってレスポンシブに変化します
 * 
 * @param {string} $size - オプションのフォントサイズ指定値（例："-3", "2"）
 */
@mixin font-size($size: null) {
  // フォントサイズの設定をマップで管理
  $font-size-map: (
    // 12px-14px  
    "14": (min: var(--font-size-xs), factor: 5vw, max: var(--font-size-s)),
    // 14px-16px
    "16": (min: var(--font-size-s), factor: 5vw, max: var(--font-size-m)),
    // 16px-18px
    "18": (min: var(--font-size-m), factor: 5vw, max: var(--font-size-l)),
    // 18px-20px
    "20":  (min: var(--font-size-l), factor: 5vw, max: var(--font-size-xl)),
    // 20px-24px
    "24":  (min: var(--font-size-xl), factor: 5vw, max: var(--font-size-2xl)),
    // 24px-30px
    "30":  (min: var(--font-size-2xl), factor: 5vw, max: var(--font-size-3xl)),
    // 30px-36px
    "36":  (min: var(--font-size-3xl), factor: 5vw, max: var(--font-size-4xl)),
    // 36px-48px
    "48":  (min: var(--font-size-4xl), factor: 5vw, max: var(--font-size-5xl)),
    // 48px-60px
    "60":  (min: var(--font-size-5xl), factor: 5vw, max: var(--font-size-6xl)),
    // 60px-72px
    "72":  (min: var(--font-size-6xl), factor: 5vw, max: var(--font-size-7xl)),
    // 72px-86.4px
    "86":  (min: var(--font-size-7xl), factor: 5vw, max: calc(var(--font-size-7xl) * 1.2))
  );
  
  // サイズが指定されている場合、そのサイズを直接適用
  @if $size {
    @if map.has-key($font-size-map, $size) {
      $size-config: map.get($font-size-map, $size);

      @include responsive-font-size(
        map.get($size-config, min),
        map.get($size-config, max),
        map.get($size-config, factor)
      );
    }
  } @else {
    // クラス名を使ったフォントサイズ制御
    @each $size-key, $size-config in $font-size-map {
      &.font-size-#{$size-key} {
        @include responsive-font-size(
          map.get($size-config, min),
          map.get($size-config, max),
          map.get($size-config, factor)
        );
      }
    }
  }
}
